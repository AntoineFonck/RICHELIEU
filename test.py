#!/usr/bin/env python3
import pyasn1.codec.der.encoder
import pyasn1.type.univ
import base64
import sys

sys.setrecursionlimit(1500)

e = 0x010001
n = 770574403817982947008720747362598060695362102521615288692970003770532073965508912508738196466744541374345013202037997925486125158720053007587855884272842570958797411113472976608945068807785604019261031995612328830869594789433747154145747419050930016956008218292957599056718994270948860130714654195492238380320190516533606027869668473794630152567117768952891145028929263740175038753743362161039717907394234642561994489868558052052361047232389873873762745666775347126211286971406505895616998001472886680581437646132636171048336369278099596508476594289688082070682544760170760148691746305642538161348875063452776747030766220408319331735871247408269148881659446744855563624843429634186165703263976942860059671392348866424265743882770783989030686342427653580497878359556255375338776451810551504807451678638105257791901808733935520961811957979789492315647631667973878107381800234256765523280537145877453774753551626064598169108371950727367068569334507711584772626834451643390823952249851577067019153593106581022360775951703229833737833149761824995648743616155709519262880987913789506414125192596365172869883608232732029211679132388792346973680301529669717939837313789846730179402727688775713844139544974287361758119631639989118593975567003
p = 30546392520695593897987598178350528154336823600657776351058012146820083992748820083853406834796301059456439333183771205428441867470915943287828709266254233700634264796592032147828056877852672530952378109823362261899975209378998038818349004853639755091535853747595028470272356495049089401972692887050342740297943662980025070489277313992470843882977650029913141640012880359461745273352152440055351804046337849709475896434771618935846120900831874963443944145669794316206452939299847965899188289774985324068246417139496078658675492668675370034208344981684251015209597326511237390983883720484636990184014455357087882978769
q = n // p
phi = (p -1)*(q-1)

def egcd(a, b):
  if a == 0:
    return (b, 0, 1)
  else:
    g, y, x = egcd(b % a, a)
    return (g, x - (b // a) * y, y)
 
def modinv(a, m):
  gcd, x, y = egcd(a, m)
  if gcd != 1:
    return None  # modular inverse does not exist
  else:
    return x % m

d = modinv(e,phi)

def pempriv(n, e, d, p, q, dP, dQ, qInv):
  template = '-----BEGIN RSA PRIVATE KEY-----\n{}-----END RSA PRIVATE KEY-----\n'
  seq = pyasn1.type.univ.Sequence()
  for x in [0, n, e, d, p, q, dP, dQ, qInv]:
    seq.setComponentByPosition(len(seq), pyasn1.type.univ.Integer(x))
  der = pyasn1.codec.der.encoder.encode(seq)
  return template.format(base64.encodestring(der).decode('ascii'))

dp = modinv(e,(p-1))
dq = modinv(e,(q-1))
#qi = pow(q, p - 2, p)
qi = modinv(q,p)

key = pempriv(n, e, d, p, q, dp, dq, qi)

f = open("DOESTHISWORK.key","w")
f.write(key)
f.close()
