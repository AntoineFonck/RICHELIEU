#!/usr/bin/env python3
import os
from collections import OrderedDict
from itertools import product

def isPrime(n, k=5): # miller-rabin
  from random import randint
  if n < 2: return False
  for p in [2,3,5,7,11,13,17,19,23,29]:
      if n % p == 0: return n == p
  s, d = 0, n-1
  while d % 2 == 0:
      s, d = s+1, d//2
  for i in range(k):
      x = pow(randint(2, n-1), d, n)
      if x == 1 or x == n-1: continue
      for r in range(1, s):
          x = (x * x) % n
          if x == 1: return False
          if x == n-1: break
      else: return False
  return True

def mydivmod(a, b):
  return(a % b)
modulus = 837849563862443268467145186974119695264713699736869090645354954749227901572347301978135797019317859500555501198030540582269024532041297110543579716921121054608494680063992435808708593796476251796064060074170458193997424535149535571009862661106986816844991748325991752241516736019840401840150280563780565210071876568736454876944081872530701199426927496904961840225828224638335830986649773182889291953429581550269688392460126500500241969200245489815778699333733762961281550873031692933566002822719129034336264975002130651771127313980758562909726233111335221426610990708111420561543408517386750898610535272480495075060087676747037430993946235792405851007090987857400336566798760095401096997696558611588264303087788673650321049503980655866936279251406742641888332665054505305697841899685165810087938256696223326430000379461379116517951965921710056451210314300437093481577578273495492184643002539393573651797054497188546381723478952017972346925020598375000908655964982541016719356586602781209943943317644547996232516630476025321795055805235006790200867328602560320883328523659710885314500874028671969578391146701739515500370268679301080577468316159102141953941314919039404470348112690214065442074200255579004452618002777227561755664967507
prime1 = "0x00:7f:40:dc:44:ba:03:d1:53:42:f7:59:08:e0:f9:30:05:96:64:4a:de:94:68:5e:08:e2:8c:9a:b1:64:0c:2f:62:c2:9a:b9:a2:39:82:4b:9e:be:eb:76:ae:6d:87:21:a3:5e:9e:d9:8d:7e:a4:38:3e:59:09:34:a5:78:b5:f7:2e:89:5d:5c:37:52:ea:fd:f6:31:cc:ba:d2:d9:60:e4:45:1d:67:76:d2:1f:f4:9c:9d:c9:b1:90:45:51:ed:d2:7f:dd:b6:74:b4:99:7f:b1:0a:d9:b7:c2:be:8b:a4:07:22:0a:8e:3a:36:ff:6d:c1:1d:63:93:af:cb:4e:c0:47:9f:65:bf:df:e3:f0:5f:1e:98:61:45:74:ec:36:a7:a5:b1:f1:8d:3d:97:6b:5a:82:49:09:00:08:0d:9d:c2:74:a4:4e:30:a1:39:68:2f:22:34:71:13:aa:3b:f2:20:4f:8e:10:eb:d4:d0:9b:b5:8c:c2:53:5f:9d:71:13:0c:0f:21:b6:6e:13:39:40:d3:a6:b1:eb:74:ad:dd:0a:29:14:81:b1:90:ad:e0:53:f0:89:c8:00:fe:dc:ad:56:59:fc:28:1d:c0:cf:5e:08:c0:16:33:24:a3:52:bb:f3:25:10:43:c3:73:b8:40:4f:fc:6b:6b:77:bd:5f:22:24:eb:7f:15"
modulustest = 770574403817982947008720747362598060695362102521615288692970003770532073965508912508738196466744541374345013202037997925486125158720053007587855884272842570958797411113472976608945068807785604019261031995612328830869594789433747154145747419050930016956008218292957599056718994270948860130714654195492238380320190516533606027869668473794630152567117768952891145028929263740175038753743362161039717907394234642561994489868558052052361047232389873873762745666775347126211286971406505895616998001472886680581437646132636171048336369278099596508476594289688082070682544760170760148691746305642538161348875063452776747030766220408319331735871247408269148881659446744855563624843429634186165703263976942860059671392348866424265743882770783989030686342427653580497878359556255375338776451810551504807451678638105257791901808733935520961811957979789492315647631667973878107381800234256765523280537145877453774753551626064598169108371950727367068569334507711584772626834451643390823952249851577067019153593106581022360775951703229833737833149761824995648743616155709519262880987913789506414125192596365172869883608232732029211679132388792346973680301529669717939837313789846730179402727688775713844139544974287361758119631639989118593975567003
primetest = 30546392520695593897987598178350528154336823600657776351058012146820083992748820083853406834796301059456439333183771205428441867470915943287828709266254233700634264796592032147828056877852672530952378109823362261899975209378998038818349004853639755091535853747595028470272356495049089401972692887050342740297943662980025070489277313992470843882977650029913141640012880359461745273352152440055351804046337849709475896434771618935846120900831874963443944145669794316206452939299847965899188289774985324068246417139496078658675492668675370034208344981684251015209597326511237390983883720484636990184014455357087882978769

clear = lambda: os.system('clear')

#print(mydivmod(modulustest, primetest))
def testprime(prime1):
  if (isPrime(int(prime1, 16)) == True and mydivmod(modulus, int(prime1, 16)) == 0):
    return prime1
  else:
#print(prime1)
    return "not yet\n"

def replace_all(text, dic):
    for i, j in dic.items():
      text = text.replace(i, j)
      print(test(text))
    return text

SUBSTITUTIONS = {
    "7f" : "fb",
    "f4": "12",
    "16": "54",
    "a4" : "57",
    "b5" : "cd"
}



#tmp = prime1.replace(":", "")
#print(int(tmp, 16))

indexes = []
replacements = ["fb", "57", "cd", "12", "fb", "fb", "57", "57", "cd", "54", "fb"]
replacements2 = ["7f", "a4", "b5", "f4", "7f", "7f", "a4", "a4", "b5", "16", "7f"]
#replacements2.reverse()

test = [i for i in range(len(prime1)) if prime1[i:].startswith(("7f", "f4", "16", "a4", "b5"))]
for i in test:
  indexes.append(int(i))
for i in indexes:
  print(prime1[i],prime1[i + 1], sep="")
  print(i)

indexes2 = indexes
#indexes2.reverse()

for i, j in zip(indexes, replacements):
  test = prime1.replace(":", "")
  print(testprime(test))
  print(prime1)
  prime1 = prime1[:i] + j + prime1[i+2:]

for i, j in zip(indexes, replacements2):
  test = prime1.replace(":", "")
  print(testprime(test))
  print(prime1)
  prime1 = prime1[:i] + j + prime1[i+2:]

#possibilities = [c + SUBSTITUTIONS.get(c, "") for c in range(len(prime1)) if prime1[i:].startswith(("7f", "f4", "16", "a4", "b5"))]
#for i in possibilities:
#  print(i)

#def sub(text):
#  possibilities = [c + SUBSTITUTIONS.get(c, "") for c in text]
#  possibilities = [i + SUBSTITUTIONS.get(i, "") for i in range(len(text)) if text[i:].startswith(("7f", "f4", "16", "a4", "b5"))]
   # 'spoils' -> ['s$5', 'p', 'o0', 'i!1|', 'l', 's$5']
#  tmp = text.replace(":", "")
#  for n in product(*possibilities):
#    print(n)
#  for subbed in product(*possibilities):
#    print("".join(subbed))
#    clear()

#sub(prime1)
#od = OrderedDict([("7f", "fb"), ("f4", "12"), ("16", "54"), ("a4", "57"), ("b5", "cd")])
#replace_all(prime1, od)
